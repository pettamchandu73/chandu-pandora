#
# $Id: msicp.conf,v 1.21.4.1 2003/11/10 15:35:15 andrei Exp $
#
# simple quick-start config script
#
                                                                                                                             
# ----------- Global configuration parameters ------------------------
                                                                                                                             
fork=yes
#log_stderror=no        # (cmd line: -E)
#debug=4

#### For handling NAT issues through media proxy, reply should not be sent to via 8/4/2004 -- by Ranga

reply_to_via=no
check_via=no   # (cmd. line: -v)
dns=no           # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)
port=5080
mhomed=yes
listen=10.20.8.25
listen=208.77.4.68
fifo="/home/wsadmin/wsproxy-1.3-MSICP/msicp_fifo"

wsdb_fifo_count=5
ws_duplicate_routeno=10
ws_db_fifo_name="/home/wsadmin/wsproxy-1.3-MSICP/msicp_fifo_db"

# ------------------ module loading ----------------------------------
                                                                                                                             
# Uncomment this if you want to use SQL database
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/mysql.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/sl.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/tm.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/rr.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/avp.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/worksmart.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/racc.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/textops.so"
loadmodule "/home/wsadmin/wsproxy-1.3-MSICP/msicp/lib/msicp/modules/maxfwd.so"

# -------------------------  request routing logic -------------------
modparam("tm", "fr_inv_timer", 250)
modparam("tm", "fr_timer",5)

# Comments by PBX TEAM -- Beware of changing this
# This parameter MUST always be set to zero
# for Worksmart PBX, behaviour is unpredictable when set to 1.
modparam("tm", "restart_fr_on_each_reply", 0)   
modparam("tm", "wt_timer", 10)   

modparam("mysql","mysqlerrornos","145,28,1015,1037,1040,1043,1053,1165,1177,1179,1184,1192,1194,1196,1213,1223,2003,2055,2013,2008,2006,2055")

#Parameters required for workSmart
modparam ("worksmart", "db_url", "mysql://wsadmin:worksmart@10.20.16.18:3306/livepbx,mysql://wsadmin:worksmart@10.20.16.19:3306/livepbx")
modparam ("worksmart", "proxy_domain", "10.20.8.25")
#modparam ("worksmart", "proxy_domain", "208.77.4.123")
modparam ("worksmart", "media_server", "10.20.8.16:6060")
modparam ("worksmart", "media_server", "10.20.8.16:6060")
modparam ("worksmart", "media_server1", "10.20.8.16:6060")
modparam ("worksmart", "media_server2", "10.20.8.16:6060")
modparam ("worksmart", "acd_server", "10.20.8.23:6080")
modparam ("worksmart", "acd_server1", "10.20.8.23:6080")
modparam ("worksmart", "acd_server2", "10.20.8.23:6080")

#Dialing parameters for Worksmart
modparam ("worksmart", "national_prefix", "1")
modparam ("worksmart", "international_prefix", "011")
modparam ("worksmart", "prefix_length", 3)
modparam ("worksmart", "outbound_proxy", "10.20.8.17:5070")
modparam ("worksmart", "outbound_proxy1", "10.20.8.17:5070")
modparam ("worksmart", "conference_server", "208.77.4.139:5088")
modparam ("worksmart", "emergency_server", "208.77.4.137:5080")
modparam ("worksmart", "fax_server", "208.77.4.136:5090")
#Smart connect server IP should be changed
modparam ("worksmart", "smartconnect_server", "208.77.4.133:5060")
modparam ("worksmart", "ws_registrar", "10.20.8.20:5060|208.77.4.76:5060|10.20.8.21:5060|208.77.4.77:5060")
modparam ("worksmart", "ws_icpips", "10.20.8.25:5080|10.20.8.25:5090|208.77.4.74:5080|208.77.4.75:5090|10.20.8.16:5090|10.20.8.23:5080")
modparam ("worksmart", "acduseragent", "P8.SmartACD")
modparam ("worksmart", "msuseragent", "P8.WsMServer PBX")
modparam ("worksmart", "registrar_domain", "p8.wspbx.com:5060")


#Location parameters for Worksmart: Location, and timezone
modparam ("worksmart", "country_code", 1)
modparam ("worksmart", "servertz", "-08:00")
modparam ("worksmart", "mwi_subscribe", "/var/spool/wsmserver/voicemail/mwi/subscribe")
modparam ("worksmart", "mwi_notify", "/var/spool/wsmserver/voicemail/mwi/mwi-immediate")

#Dialing parameters for racc
modparam ("racc", "wsdb_fifo_name", "/home/wsadmin/wsproxy-1.3-MSICP/msicp_fifo_db")

# main routing logic
route {
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10"))
	{
		if (method != "ACK")
		{
			sl_send_reply("483","Too Many Hops");
			break;
		}

		drop ();
	}

	if (msg:len > max_len)
	{
		if (method != "ACK")
		{
			sl_send_reply("513", "Message too big");
			break;
		}

		drop();
	}

	# the source of request MUST be REGISTRARs or MEDIA/ACD Servers
	#if (!isinlist("3"))
	#{
	#	sl_send_reply("501", "Service Unavailable. Use Proxy");
	#	break;
	#}

	record_route();
	
	# loose-route processing
	if (loose_route())
	{
		if (method=="INVITE")
		{
			sl_send_reply("100", "Trying..");
		}

		t_relay();
		break;
	}

	if (method=="NOTIFY")
	{
	       log(1,"2 got notify from media server");
		if (search("Message-Account: sip:mwi"))
		{
		    if((src_ip != 10.20.8.16) & (src_port != 6060)){
	               sl_send_reply("200","OK");
		    	log(1,"got notify from media server");
		    }
		    log(1,"1 got notify from media server");
        	    ws_process_mwi_notify("1");
	            break;
       	}
		else
		{
			sl_send_reply("501", "Service Unavailable. Use Proxy");
			break;
		}
	}	

	if (method == "INVITE")
	{
		sl_send_reply("100", "Trying");

		if (!worksmart_get_dialplan("1", "1"))
		{
			sl_send_reply("404", "Not found From WSDialPlan");
			break;
		}

		break;
	}

	t_relay();
	break;
}

route [2] {
	log (1, "In Route 2\n");
    if (t_check_status ("302|301")) {
	        log(1, "Moved Temporarily\n\n");
	        t_relay();
	        break;
	}

	if (method == "INVITE")
	{
		revert_uri();
		t_on_reply("1");

		if (!worksmart_get_dialplan("2", "1"))
		{
			sl_send_reply("404", "Not found");
			break;
		}

		break;
	}

	t_relay();
	break;
}

route [3] {
	log (1, "In Route 3\n");
	if (t_check_status ("302|301")) {
	        log(1, "Moved Temporarily\n\n");
	        t_relay();
	        break;
	}

      
	if (method == "INVITE")
	{
		revert_uri();
		t_on_reply("1");

		if (!worksmart_get_dialplan("3", "1"))
		{
			sl_send_reply("404", "Not found");
			break;
		}

		break;
	}

	t_relay();
	break;
}

route [4] {
	log (1, "In Route 4\n");
	if (t_check_status ("302|301")) {
	        log(1, "Moved Temporarily\n\n");
	        t_relay();
	        break;
	}
       
	if (method == "INVITE")
	{
		revert_uri();
		t_on_reply("1");

		if (!worksmart_get_dialplan("4", "1"))
		{
			sl_send_reply("404", "Not found");
			break;
		}

		break;
	}

	t_relay();
	break;
}

route [5] {
	log (1, "In route 5\n");
	if (t_check_status ("302|301")) {
	        log(1, "Moved Temporarily\n\n");
	        t_relay();
	        break;
	}
      
	if (method == "INVITE")
	{
		revert_uri();
		t_on_reply("1");

		if (!worksmart_get_dialplan("5", "1"))
		{
			sl_send_reply("404", "Not found");
			break;
		}

		break;
	}

	t_relay();
	break;
}

# MEDIA SERVER FAILOVER ROUTES -- DO NOT CONFUSE WITH FAILURE ROUTES
route[6] {
	log(1, "In route 6\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("MediaServer");
			if (!worksmart_get_dialplan("1", "2"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
		{
			if (!worksmart_get_dialplan("2", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
		}
	}

	t_relay();
	break;
}

route[7] {
    log(1, "In route 7\n");

    if (method == "INVITE")
    {
        t_on_reply("1");

        #if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
        if (t_check_status ("408"))
        {
	        use_secondary_server("MediaServer");
            if (!worksmart_get_dialplan("2", "2"))
            {
                sl_send_reply("404", "Not found");
            }

            break;
        }
		else
        {
            if (!worksmart_get_dialplan("3", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

    }

    t_relay();
    break;
}

route[8] {
    log(1, "In route 8\n");

    if (method == "INVITE")
    {
        t_on_reply("1");

        #if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
        if (t_check_status ("408"))
        {
	        use_secondary_server("MediaServer");
            if (!worksmart_get_dialplan("3", "2"))
            {
                sl_send_reply("404", "Not found");
            }

            break;
        }
  		else
        {
            if (!worksmart_get_dialplan("4", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

    }

    t_relay();
    break;
}

route[9] {
    log(1, "In route 9\n");

    if (method == "INVITE")
    {
        t_on_reply("1");

        #if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
        if (t_check_status ("408"))
        {
	        use_secondary_server("MediaServer");
            if (!worksmart_get_dialplan("4", "2"))
            {
                sl_send_reply("404", "Not found");
            }

            break;
        }
  		else
        {
            if (!worksmart_get_dialplan("5", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

    }

    t_relay();
    break;
}

route[10] {
    log(1, "In route 10\n");

    if (method == "INVITE")
    {
        t_on_reply("1");

        #if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
        if (t_check_status ("408"))
        {
	        use_secondary_server("MediaServer");
            if (!worksmart_get_dialplan("5", "2"))
            {
                sl_send_reply("404", "Not found");
            }

            break;
        }
    }

    t_relay();
    break;
}

# ACD SERVER FAILOVER ROUTES -- DO NOT CONFUSE WITH FAILURE ROUTES -- NOT USED AT THE MOMENT
route[11] {
	log (1, "In route 11\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("ACDServer");
			if (!worksmart_get_dialplan("1", "3"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("2", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[12] {
	log (1, "In route 12\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("ACDServer");
			if (!worksmart_get_dialplan("2", "3"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("3", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[13] {
	log (1, "In route 13\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("ACDServer");
			if (!worksmart_get_dialplan("3", "3"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("4", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[14] {
	log (1, "In route 14\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("ACDServer");
			if (!worksmart_get_dialplan("4", "3"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("5", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[15] {
	log (1, "In route 15\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("ACDServer");
			if (!worksmart_get_dialplan("5", "3"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
	}

	t_relay();
	break;
}

# OMS FAILOVER ROUTES -- DO NOT CONFUSE WITH FAILURE ROUTES
route[16] {
	log (1, "In route 16\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("OMSServer");
			if (!worksmart_get_dialplan("1", "4"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("2", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[17] {
	log (1, "In route 17\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("OMSServer");
			if (!worksmart_get_dialplan("2", "4"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("3", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[18] {
	log (1, "In route 18\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("OMSServer");
			if (!worksmart_get_dialplan("3", "4"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("4", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[19] {
	log (1, "In route 19\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("OMSServer");
			if (!worksmart_get_dialplan("4", "4"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
		else
        {
            if (!worksmart_get_dialplan("5", "1"))
            {
                sl_send_reply("404", "Not found");
            }
            break;
        }

	}

	t_relay();
	break;
}

route[20] {
	log (1, "In route 20\n");

	if (method == "INVITE")
	{
		t_on_reply("1");

		#if (t_check_status ("403|404|408|480|[5-6][0-9][0-9]|[5-6][0-9][0-9]")) {
		if (t_check_status ("408"))
		{
			use_secondary_server("OMSServer");
			if (!worksmart_get_dialplan("5", "4"))
			{
				sl_send_reply("404", "Not found");
			}

			break;
		}
	}

	t_relay();
	break;
}

# FAILURE ROUTES
failure_route[2]{
	log(1,"FAILURE ROUTE 2 \n");
	route (2);
	break;
}

failure_route[3]{
	log(1,"FAILURE ROUTE 3 \n");
	route (3);
	break;
}

failure_route[4]{
	log(1,"FAILURE ROUTE 4 \n");
	route (4);
	break;
}

failure_route[5]{
	log(1, "FAILURE ROUTE 5\n");
	route(5);
	break;
}

failure_route[6]{
	log(1, "FAILURE ROUTE 6\n");
	drop();
	break;
}

failure_route[9]{
	log(1, "FAILURE ROUTE 9\n");
	t_relay();
	break;
}

# MEDIA SERVER FAILURE ROUTES -- DO NOT CONFUSE WITH FAILOVER ROUTES
failure_route[11] {
        log(1, "FAILURE ROUTE 11\n");
        route(6);
        break;
}

failure_route[12] {
        log(1, "FAILURE ROUTE 12\n");
        route(7);
        break;
}

failure_route[13] {
        log(1, "FAILURE ROUTE 13\n");
        route(8);
        break;
}

failure_route[14] {
        log(1, "FAILURE ROUTE 14\n");
        route(9);
        break;
}

failure_route[15] {
        log(1, "FAILURE ROUTE 15\n");
        route(10);
        break;
}

# OMS SERVER FAILURE ROUTES -- DO NOT CONFUSE WITH FAILOVER ROUTES
failure_route[16] {
        log(1, "FAILURE ROUTE 16\n");
        route(16);
        break;
}

failure_route[17] {
        log(1, "FAILURE ROUTE 17\n");
        route(17);
        break;
}

failure_route[18] {
        log(1, "FAILURE ROUTE 18\n");
        route(18);
        break;
}

failure_route[19] {
        log(1, "FAILURE ROUTE 19\n");
        route(19);
        break;
}

failure_route[20] {
        log(1, "FAILURE ROUTE 20\n");
        route(20);
        break;
}

# ACD SERVER FAILURE ROUTES -- DO NOT CONFUSE WITH FAILOVER ROUTES -- NOT USED AT THE MOMENT
failure_route[21] {
        log(1, "FAILURE ROUTE 21\n");
        route(11);
        break;
}

failure_route[22] {
        log(1, "FAILURE ROUTE 22\n");
        route(12);
        break;
}

failure_route[23] {
        log(1, "FAILURE ROUTE 23\n");
        route(13);
        break;
}

failure_route[24] {
        log(1, "FAILURE ROUTE 24\n");
        route(14);
        break;
}

failure_route[25] {
        log(1, "FAILURE ROUTE 25\n");
        route(15);
        break;
}

# REPLY ROUTES
onreply_route[1] {
	if (search("Remote-Party-ID: "))
	{
		remove_hf("Remote-Party-ID");
	}

	break;
}

onreply_route[2] {
	log(1,"on_reply_route - 2 called\n");
	break;
}

onreply_route[10] {
   log(1,"We are in on_reply(3) for fixing contact for second 200 OK\n");
   t_terminate_duplicate("1");
   break;
}

